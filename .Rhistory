transpose() %>%
map(unlist) %>%
set_names(c("models","RMSE")) %>%
as_tibble() %>%
arrange(RMSE)->
caret_table
knitr::kable(caret_table, digits = 3, booktabs = TRUE, caption = "Result produced by Caret. Models arranged by RMSE.")
library(leaps)
install.packages("leaps")
library(leaps)
BEST.mod = regsubsets(Apps ~ ., data_df)
summary(BEST.mod)
BEST.mod_17 <- regsubsets(Apps ~ ., data_df, nvmax = 17)
bmod.summary <- summary(BEST.mod_17)
BEST.mod_17 <- regsubsets(Apps ~ ., data_df, nvmax = 17)
bmod.summary <- summary(BEST.mod_17)
names(bmod.summary)
names(bmod.summary)
bmod.summary$which
bmod.summary$rsq
names(bmod.summary)
best_df <- data.frame(bmod.summary[, c("rsq", "rss", "adjr2", "cp", "bic")])
names(bmod.summary)
best_df <- data.frame(bmod.summary[, c("rsq", "adjr2", "cp", "bic")])
bmod.summary[, c("rsq", "adjr2") ]
bmod.summary[, "rsq" ]
as.data.frame(bmod.summary[c("rsq")])
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("rsq", "adjr2", "cp", "bic")])
best_df
as.data.frame(bmod.summary[c("rsq")])
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("rsq", "adjr2", "cp", "bic")]) %>% gather(key = "metric", value = "value")
best_df
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("rsq", "adjr2", "cp", "bic")]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
ggplot(data = best_df, aes())
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("rsq", "adjr2", "cp", "bic")]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
best_df
#ggplot(data = best_df, aes())
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("rsq", "adjr2", "cp", "bic")]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric) +
geom_line()
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("rsq", "adjr2", "cp", "bic")]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric)) +
geom_line()
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("rsq", "adjr2", "cp")]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("rsq", "adjr2", "cp")]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 3))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric)) +
geom_line()
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("adjr2", "cp")]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 2))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric)) +
geom_line()
names(bmod.summary)
best_df <- as.data.frame(bmod.summary[c("adjr2", "cp")]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 2))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric)) +
geom_line()
best_df
names(bmod.summary)
metrics <- c("adjr2", "rsq", "bic" "cp")
names(bmod.summary)
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(bmod.summary[metrics]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
ggplot(data = best_df, aes(x = var_count, y = value)) +
geom_line() +
facet_grid(metric ~ .)
names(bmod.summary)
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(bmod.summary[metrics]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric)) +
geom_line() +
facet_grid(. ~ metric)
names(bmod.summary)
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(bmod.summary[metrics]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric)) +
geom_line() +
facet_grid(. ~ metric, scales = "free")
names(bmod.summary)
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(bmod.summary[metrics]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric)) +
geom_line() +
facet_grid(. ~ metric, scales = "free_y")
names(bmod.summary)
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(bmod.summary[metrics]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric)) +
geom_line() +
facet_grid(. ~ metric, scales = "free_y")
names(bmod.summary)
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(bmod.summary[metrics]) %>% gather(key = "metric", value = "value") %>% mutate(var_count = rep(1:17, 4))
ggplot(data = best_df, aes(x = var_count, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y")
plot(BEST.mod_17 ,scale =" adjr2 ")
plot(BEST.mod_17 ,scale ="adjr2")
map(as.data.frame(bmod.summary[metrics]), which.max)
map_dbl(best_df, which.max)
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(bmod.summary[metrics])
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y")
map_dbl(best_df, which.max)
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
install.packages("microbenchmark")
knitr::opts_chunk$set(cache = TRUE)
library(ISLR)
library(tidyverse)
library(glmnet)
library(magrittr)
library(microbenchmark)
library(leaps)
BEST.mod_9 = regsubsets(Apps ~ ., data_df)
timer <- microbenchmark(regsubsets(Apps ~ ., data_df))
summary(BEST.mod_9)
timer
library(leaps)
BEST.mod_9 = regsubsets(Apps ~ ., data_df)
timer <- microbenchmark(regsubsets(Apps ~ ., data_df), times = 1L)
summary(BEST.mod_9)
timer
library(leaps)
BEST.mod_9 = regsubsets(Apps ~ ., data_df)
timer <- microbenchmark(regsubsets(Apps ~ ., data_df), times = 100L)
summary(BEST.mod_9)
timer
library(leaps)
BEST.mod_9 = regsubsets(Apps ~ ., data_df)
timer <- microbenchmark(regsubsets(Apps ~ ., data_df), times = 100L)
summary(BEST.mod_9)
timer
timer_9 <- microbenchmark(regsubsets(Apps ~ ., data_df), times = 100L)
timer_17 <- microbenchmark(regsubsets(Apps ~ ., data_df, nvmax = 17))
timer_9
timer_17
timer_17 <- microbenchmark(regsubsets(Apps ~ ., data_df, nvmax = 17))
timer_17
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")
summary (regfit .fwd )
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")
summary(FWD.mod)
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 18, method = "forward")
summary(FWD.mod)
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")
summary(FWD.mod)
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")
sum.FWD <- summary(FWD.mod)
names(sum.FWD)
knitr::opts_chunk$set(cache = TRUE)
knitr::opts_chunk$set(message = FALSE)
library(ISLR)
library(tidyverse)
library(glmnet)
library(magrittr)
library(microbenchmark)
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(my_summary[metrics])
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y")
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
}
show_metrics(as.name(bmod.summary))
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(my_summary[metrics])
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y")
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
}
show_metrics(bmod.summary)
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(my_summary[metrics])
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y") %>% print()
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
}
show_metrics(bmod.summary)
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(my_summary[metrics])
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
print(ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y"))
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
show_metrics(bmod.summary)
}
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(my_summary[metrics])
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y")
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
#show_metrics(bmod.summary)
}
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(my_summary[metrics])
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y") %>% print()
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
show_metrics(my_summary)
}
show_metrics(bmod.summary)
show_metrics(bmod.summary)
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(my_summary[metrics])
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y")
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
show_metrics(my_summary)
}
show_metrics(bmod.summary)
`]`(1:3, 2)
`[`(1:3, 2)
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(`[`(my_summary, metrics))
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y")
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
}
show_metrics(bmod.summary)
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(`[`(my_summary, metrics))
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y") %>% print()
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
}
show_metrics(bmod.summary)
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(`[`(my_summary, metrics))
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
print(ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y") )
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
}
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(`[`(my_summary, metrics))
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
(ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y")) %>% print()
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
}
show_metrics(bmod.summary)
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")
sum.FWD <- summary(FWD.mod)
show_metrics(sum.FWD)
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")
sum.FWD <- summary(FWD.mod)
show_metrics(sum.FWD)
microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward"))
knitr::opts_chunk$set(cache = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(ISLR)
library(tidyverse)
library(glmnet)
library(magrittr)
library(microbenchmark)
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")
sum.FWD <- summary(FWD.mod)
show_metrics(sum.FWD)
microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward"))$mean
microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")) %>% names()
microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")) %>% str()
microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward"))$expr %>% str()
microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward"))
microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17))
BEST_time <- microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward"))
FWD_time <- microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17))
BEST_time
FWD_time
FWD_time <- microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward"))
BEST_time <- microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17))
BEST_time
FWD_time
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")
sum.FWD <- summary(FWD.mod)
sum.FWD
show_metrics(sum.FWD)
sum.FWD$which
sum.FWD$which[[10, ]]
sum.FWD$which[10, ]
data_df
data_df
College
X = model.matrix(Apps ~ . -1, data = College)
Y = College$Apps
data_df <- cbind(as.data.frame(X), College[, "Apps"]) %>% rename(Apps = `College[, "Apps"]`)
X
X = model.matrix(Apps ~ . +0, data = College)
Y = College$Apps
data_df <- cbind(as.data.frame(X), College[, "Apps"]) %>% rename(Apps = `College[, "Apps"]`)
X
X = model.matrix(~ Apps -1, data = College)
Y = College$Apps
data_df <- cbind(as.data.frame(X), College[, "Apps"]) %>% rename(Apps = `College[, "Apps"]`)
X
X = model.matrix(Apps ~ . +0, data = College)
Y = model.matrix(~ Apps + 0, data = College)
data_df <- cbind(as.data.frame(X), as.data.frame(Y))
X
data_df
X = model.frame(Apps ~ . +0, data = College)
Y = model.frame(~ Apps + 0, data = College)
data_df <- cbind(X, Y)
X = model.frame(Apps ~ . +0, data = College) %>% select(-PrivateNo)
X %>% names
data_df
X
data_df
X = model.frame(Apps ~ . +0, data = College)
Y = model.frame(~ Apps + 0, data = College)
data_df <- cbind(X, Y)
X
data_df
X = model.frame(Apps ~ . - 1, data = College)
Y = model.frame(~ Apps + 0, data = College)
data_df <- cbind(X, Y)
X
data_df
X = model.matrix(Apps ~ . - 1, data = College)
Y = model.frame(~ Apps + 0, data = College)
data_df <- cbind(X, Y)
X
data_df
X = model.frame(Apps ~ . - 1, data = College)
Y = model.frame(~ Apps + 0, data = College)
data_df <- cbind(X, Y)
X
data_df
X = model.matrix(Apps ~ . - 1, data = College)
Y = model.matrix(Apps + 0, data = College)
X = model.matrix(Apps ~ . - 1, data = College)
Y = model.matrix(Apps ~ . + 0, data = College)
data_df <- as.data.frame(cbind(X, Y))
X
data_df
X = model.matrix.lm(Apps ~ . - 1, data = College)
Y = model.matrix(Apps ~ . + 0, data = College)
data_df <- as.data.frame(cbind(X, Y))
data_df
X = model.matrix.default(Apps ~ . - 1, data = College)
Y = model.matrix(Apps ~ . + 0, data = College)
data_df <- as.data.frame(cbind(X, Y))
data_df
X = model.matrix(Apps ~ . - 1, data = College)
Y = model.matrix(Apps ~ . + 0, data = College)
data_df <- as.data.frame(cbind(X, Y))
data_df
X
Y
X = model.matrix(Apps ~ . - 1, data = College)
Y = model.matrix(Apps ~ . + 0, data = College)
data_df <- as.data.frame(cbind(X, Y))
X
Y
X = model.matrix(Apps ~ . - 1, data = College)
Y = model.matrix(~ Apps + 0, data = College)
data_df <- as.data.frame(cbind(X, Y))
Y
X = model.matrix(Apps ~ . - 1, data = College)[, -1]
Y = model.matrix(~ Apps + 0, data = College)
data_df <- as.data.frame(cbind(X, Y))
data_df
knitr::opts_chunk$set(cache = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(ISLR)
library(tidyverse)
library(glmnet)
library(magrittr)
library(microbenchmark)
str(College)
X = model.matrix(Apps ~ . - 1, data = College)[, -1]
Y = model.matrix(~ Apps + 0, data = College)
data_df <- as.data.frame(cbind(X, Y))
train <- sample(1:nrow(X), replace = FALSE, round(nrow(X) * .25))
X.train <- X[train, ]
Y.train <- Y[train]
X.test <- X[-train, ]
Y.test <- Y[-train]
OLS.mod <- glmnet(X.train, Y.train)
OLS.pred <- predict(OLS.mod, newx = X.test)
RMSE <- function(x){sqrt(sum((x-Y.test)^2))/length(x)}
Percent.Error <- function(x){RMSE(x)/mean(Y) * 100}
OLS.RMSE <- RMSE(OLS.pred)
OLS.Percent.Err <- Percent.Error(OLS.pred)
results <- tibble(model = "OLS",
RMSE = OLS.RMSE,
)
knitr::kable(results, digits = 3)
grid <- 10^ seq (10,-2, length =100)
ridge.mod <- glmnet(X.test, Y.test, alpha = 0, lambda = grid)
# alpha = 0 specifies that we are using a Ridge Regression.
# glmnet automatically does centering first; Standardize = TRUE by default
dim(coef(ridge.mod))
el2norm <- function(x){sqrt(sum(x^2))}
el2norm.r <- function(col){el2norm(coef(ridge.mod)[, col])}
coef(ridge.mod)[,c(10,50,90)] %>% rbind( map_dbl(c(10,50,90), el2norm.r) ) %>% rbind(ridge.mod$lambda[c(10,50,90)])
predict(ridge.mod, s=80, type="coefficients")
# print(ridge.mod)   output is too long
set.seed(10)
ridge.cv <- cv.glmnet(X.train, Y.train, alpha = 0)
ridge.pred <- predict(ridge.cv, s="lambda.min", newx = X.test)
ridge.RMSE <- RMSE(ridge.pred)
bestlam <- ridge.cv$lambda.min
set.seed(1)
lasso.cv <- cv.glmnet(X.train, Y.train, alpha = 1)
lasso.lam <- lasso.cv$lambda.min
coef(lasso.cv, s = "lambda.min")
lasso.mod <- glmnet(X.train, Y.train, alpha = 1, lambda = grid)
lasso.pred <- predict(lasso.mod, s=lasso.lam, newx = X.test)
lasso.RMSE <- RMSE(lasso.pred)
results <- rbind(results, list("Ridge", ridge.RMSE), list("Lasso", lasso.RMSE))
knitr::kable(results, digits = 3)
library(pls)
set.seed(2)
PCR.mod <- pcr(Apps ~ ., subset = train, data = data_df,  validation = "CV")
validationplot(PCR.mod, val.type = "MSEP")
summary(PCR.mod)
PCR.pred <- predict(PCR.mod, X.test, ncomp = 3)
PCR.RMSE <- RMSE(PCR.pred)
results <- rbind(results,  list("PCR", PCR.RMSE))
knitr::kable(results, digits = 3)
PLS.mod <- plsr(Apps ~ ., data = data_df, subset = train, validation = "CV")
summary(PLS.mod)
validationplot(PLS.mod)
PLS.pred <- predict(PLS.mod, X.test, ncomp = 3)
PLS.RMSE <- RMSE(PLS.pred)
results <- rbind(results, list("PLS", PLS.RMSE))
knitr::kable(results, digits = 3)
library(caret)
caret_RMSE <- function(x){sqrt(sum((x-Y.test)^2))/length(x)}
trainControl <- trainControl(method="cv", number=5)
my_caret <- function(method_name){
#this function accepts the name of the method and returns its RMSE from testing it on our specified College dataset
method_fit <- train(Apps~., data=data_df, method=method_name, metric="RMSE", preProc=c("center","scale"), trControl=trainControl)
method_predictions <- predict(method_fit, X.test)
method_RMSE <- caret_RMSE(method_predictions)
list(method_name, method_RMSE)
}
caret_names <- list("lm", "lasso", "ridge", "glmnet", "pcr", "pls", "lars")
map(caret_names, my_caret) %>%
transpose() %>%
map(unlist) %>%
set_names(c("models","RMSE")) %>%
as_tibble() %>%
arrange(RMSE)->
caret_table
knitr::kable(caret_table, digits = 3, booktabs = TRUE, caption = "Result produced by Caret. Models arranged by RMSE.")
library(leaps)
BEST.mod_9 = regsubsets(Apps ~ ., data_df)
summary(BEST.mod_9)
BEST.mod_17 <- regsubsets(Apps ~ ., data_df, nvmax = 17)
bmod.summary <- summary(BEST.mod_17)
show_metrics <- function(my_summary){
metrics <- c("adjr2", "rsq", "bic", "cp")
best_df <- as.data.frame(`[`(my_summary, metrics))
best_df_melt <- best_df %>% gather(key = "metric", value = "value") %>% mutate(model = rep(1:17, 4))
(ggplot(data = best_df_melt, aes(x = model, y = value, color = metric)) +
geom_line() +
facet_grid(metric ~ ., scales = "free_y")) %>% print()
c(map_dbl(best_df[c("adjr2", "rsq")], which.max), map_dbl(best_df[c("bic", "cp")], which.min))
}
show_metrics(bmod.summary)
FWD.mod <- regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward")
sum.FWD <- summary(FWD.mod)
sum.FWD
show_metrics(sum.FWD)
FWD_time <- microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17, method = "forward"))
BEST_time <- microbenchmark(regsubsets(Apps ~ ., data = data_df, nvmax = 17))
BEST_time
FWD_time
sum.FWD$which[10, ]
sum.FWD$which[10, ] == bmod.summary$which[10, ]
source('~/Desktop/projects/Github/Simulacra/build_site.R', echo=TRUE)
