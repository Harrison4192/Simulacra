principal.components=c()
for(i in 1:nrow(y)){
principal.components[i]=z(i)
}
principal.components
Probe=read.table("./Downloads/multivariate_analysis/T3_5_PROBE.DAT",header = F)[,-1]
names(Probe)=c("y1","y2","y3","y4","y5")
y<-as.matrix(Probe)
S=as.matrix(cov(y))
C=as.matrix(eigen(S)[[2]])
A=t(C)
A
Sz=A%*%S%*%tr(A)
eigenvalues.S=diag(Sz)
sum.eigenvalues=sum(eigenvalues.S)
percent.variance.explained=roundd(eigenvalues/sum.eigenvalues*100,2)
Probe=read.table("./Downloads/multivariate_analysis/T3_5_PROBE.DAT",header = F)[,-1]
names(Probe)=c("y1","y2","y3","y4","y5")
y<-as.matrix(Probe)
S=as.matrix(cov(y))
C=as.matrix(eigen(S)[[2]])
A=t(C)
A
Sz=A%*%S%*%tr(A)
eigenvalues.S=diag(Sz)
sum.eigenvalues=sum(eigenvalues.S)
percent.variance.explained=roundd(eigenvalues/sum.eigenvalues*100,2)
Sz=A%*%S%*%t(A)
eigenvalues.S=diag(Sz)
sum.eigenvalues=sum(eigenvalues.S)
percent.variance.explained=round(eigenvalues/sum.eigenvalues*100,2)
Sz=A%*%S%*%t(A)
eigenvalues.S=diag(Sz)
sum.eigenvalues=sum(eigenvalues.S)
percent.variance.explained=round(eigenvalues.S/sum.eigenvalues*100,2)
percent.variance.explained
sum(percent.variance.explained)
plot(eigenvalues.S,percent.variance.explained)
plot(eigenvalues.S,percent.variance.explained,type = "line")
plot(eigenvalues.S,percent.variance.explained,type = "l")
plot(eigenvalues.S,percent.variance.explained,type = l)
histogram(eigenvalues.S,percent.variance.explained)
hist(eigenvalues.S,percent.variance.explained)
hist(eigenvalues.S,percent.variance.explained,type= l)
eigenvalues.S
percent.variance.explained
hist(eigenvalues.S,percent.variance.explained,type= h)
hist(eigenvalues.S,percent.variance.explained,type= p)
hist(eigenvalues.S,percent.variance.explained,type= "l")
hist(eigenvalues.S,percent.variance.explained)
plot(eigenvalues.S,percent.variance.explained,type = "l")
plot(eigenvalues.S,percent.variance.explained,type = "h")
eigenvalues.S
U.test=(n-(2*p+1)/6)*(k*log(lambda.bar)-sum(log(eigenvalues.S[3:5])))
p=5
k=3
nu=(k-1)*(k+2)/2
n=nrow(y)
lambda.bar=1/k*sum(eigenvalues.S[3:5])
U.test=(n-(2*p+1)/6)*(k*log(lambda.bar)-sum(log(eigenvalues.S[3:5])))
p=5
k=3
nu=(k-1)*(k+2)/2
n=nrow(y)
lambda.bar=1/k*sum(eigenvalues.S[3:5])
U.test=(n-(2*p+1)/6)*(k*log(lambda.bar)-sum(log(eigenvalues.S[3:5])))
U.test
1-pchisq(U.test,df=nu)
which.max(A[1,])
which.max(A[2,])
which.max(abs(A[1,]))
which.max(abs(A[2,]))
Sinv=matrix(c(0.001, -0.004, -0.003,
0.004, 0.094, -0.008,
-0.003, -0.008, 0.027,),nrow = 3,byrow = T)
y1=c(140.00000, 12.61111, 18.11111)
y2=c(121.38889, 12.72222, 11.16667)
y3=c(106.50000, 11.94444, 14.27778)
y <- c(80, 10, 30)
Sinv=matrix(c(0.001, -0.004, -0.003,
0.004, 0.094, -0.008,
-0.003, -0.008, 0.027),nrow = 3,byrow = T)
y1=c(140.00000, 12.61111, 18.11111)
y2=c(121.38889, 12.72222, 11.16667)
y3=c(106.50000, 11.94444, 14.27778)
y <- c(80, 10, 30)
Sinv=matrix(c(0.001, -0.004, -0.003,
0.004, 0.094, -0.008,
-0.003, -0.008, 0.027),nrow = 3,byrow = T)
y1=c(140.00000, 12.61111, 18.11111)
y2=c(121.38889, 12.72222, 11.16667)
y3=c(106.50000, 11.94444, 14.27778)
y.bars=c(y1,y2,y3)
y <- c(80, 10, 30)
D=function(y.i){
t(y-y.i)%*%Sinv%&%(y-y.i)
}
D(y.bars)
Sinv=matrix(c(0.001, -0.004, -0.003,
0.004, 0.094, -0.008,
-0.003, -0.008, 0.027),nrow = 3,byrow = T)
y1=c(140.00000, 12.61111, 18.11111)
y2=c(121.38889, 12.72222, 11.16667)
y3=c(106.50000, 11.94444, 14.27778)
y.bars=c(y1,y2,y3)
y <- c(80, 10, 30)
D=function(y.i){
t(y-y.i)%*%Sinv%*%(y-y.i)
}
D(y.bars)
Sinv=matrix(c(0.001, -0.004, -0.003,
0.004, 0.094, -0.008,
-0.003, -0.008, 0.027),nrow = 3,byrow = T)
y1=c(140.00000, 12.61111, 18.11111)
y2=c(121.38889, 12.72222, 11.16667)
y3=c(106.50000, 11.94444, 14.27778)
y.bars=c(y1,y2,y3)
y <- c(80, 10, 30)
D=function(y.i){
(y-y.i)%*%Sinv%*%t(y-y.i)
}
D(y.bars)
Sinv=matrix(c(0.001, -0.004, -0.003,
0.004, 0.094, -0.008,
-0.003, -0.008, 0.027),nrow = 3,byrow = T)
y1=c(140.00000, 12.61111, 18.11111)
y2=c(121.38889, 12.72222, 11.16667)
y3=c(106.50000, 11.94444, 14.27778)
y.bars=c(y1,y2,y3)
y <- c(80, 10, 30)
D=function(y.i){
(y-y.i)%*%Sinv%*%t(y-y.i)
}
D(y1)
y
y-y1
Sinv
y-y1%*%Sinv
(y-y1)%*%Sinv
(y-y1)%*%Sinv%*%(y-y1)
Sinv%*%(y-y1)
y-y1
ncol(y)
ncol(as.matrix(y))
Sinv=matrix(c(0.001, -0.004, -0.003,
0.004, 0.094, -0.008,
-0.003, -0.008, 0.027),nrow = 3,byrow = T)
y1=c(140.00000, 12.61111, 18.11111)
y2=c(121.38889, 12.72222, 11.16667)
y3=c(106.50000, 11.94444, 14.27778)
y.bars=c(y1,y2,y3)
y <- c(80, 10, 30)
D=function(y.i){
t(as.matrix(y-y.i))%*%Sinv%*%as.matrix(y-y.i)
}
D(y1)
Sinv=matrix(c(0.001, -0.004, -0.003,
0.004, 0.094, -0.008,
-0.003, -0.008, 0.027),nrow = 3,byrow = T)
y1=c(140.00000, 12.61111, 18.11111)
y2=c(121.38889, 12.72222, 11.16667)
y3=c(106.50000, 11.94444, 14.27778)
y.bars=c(y1,y2,y3)
y <- c(80, 10, 30)
D=function(y.i){
t(as.matrix(y-y.i))%*%Sinv%*%as.matrix(y-y.i)
}
D(y.bars)
D(y2)
D(y3)
D(y1)
Sinv%*%(y1-y2)
Sinv%*%(y1-y2)%*%y1
t(Sinv%*%(y1-y2))%*%y1
L=function(i){
y.bars[i]%*%Sinv%*%y-.5*y.bars[i]%*%Sinv%*%y.bars[i]
}
L(1)
L(2)
L(3)
L=function(i){
t(y.bars[i])%*%Sinv%*%y-.5*t(y.bars[i])%*%Sinv%*%y.bars[i]
}
L(1)
L(2)
L(3)
ncol(1)
Sinv%*%y
t(y)
t(y)%*%Sinv%*%y
L=function(i){
t(y.bars[i])%*%Sinv%*%y-.5*(t(y.bars[i])%*%Sinv%*%y.bars[i])
}
L(1)
t(y)%*%Sinv
t(y.bars[1])
y.bars
y.bars=list(y1,y2,y3)
y.bars
y.bars[[1]]
L=function(i){
t(y.bars[[i]])%*%Sinv%*%y-.5*(t(y.bars[[i])%*%Sinv%*%y.bars[[i])
}
L(1)
L(2)
L(3)
t(y.bars[[i]])
t(y.bars[[1]])
L=function(i){
t(y.bars[[i]])%*%Sinv%*%y-.5*(t(y.bars[[i]])%*%Sinv%*%y.bars[[i]])
}
L(1)
L(2)
L(3)
L(1)
Sinv
Sinv=matrix(c(0.001, -0.004, -0.003,
-0.004, 0.094, -0.008,
-0.003, -0.008, 0.027),nrow = 3,byrow = T)
y1=c(140.00000, 12.61111, 18.11111)
y2=c(121.38889, 12.72222, 11.16667)
y3=c(106.50000, 11.94444, 14.27778)
y.bars=list(y1,y2,y3)
y <- c(80, 10, 30)
D=function(y.i){
t(as.matrix(y-y.i))%*%Sinv%*%as.matrix(y-y.i)
}
D(y1)
D(y2)
D(y3)
t(Sinv%*%(y1-y2))%*%y1
L=function(i){
t(y.bars[[i]])%*%Sinv%*%y-.5*(t(y.bars[[i]])%*%Sinv%*%y.bars[[i]])
}
L(1)
L(2)
L(3)
Sinv
D(y1)
D(y2)
D(y3)
L=function(i){
t(y.bars[[i]])%*%Sinv%*%y-.5*(t(y.bars[[i]])%*%Sinv%*%y.bars[[i]])
}
L(1)
L(2)
L(3)
log(.1)+L(1)
t(y.bars[[i]])%*%Sinv%*%y-(t(y.bars[[i]])%*%Sinv%*%y.bars[[i]])
L=function(i){
t(y.bars[[i]])%*%Sinv%*%y-(t(y.bars[[i]])%*%Sinv%*%y.bars[[i]])
}
L=function(i){
t(y.bars[[i]])%*%Sinv%*%y-(t(y.bars[[i]])%*%Sinv%*%y.bars[[i]])
}
log(.1)+L(1)
y.bars[[1]]
E=c(455.13558, 82.91455,
82.91455, 1077.96628)
E/(42-2-1)
sqrt(.9)
sqrt(.58)
(1-.9)(1-.58)
(1-.9)*(1-.58)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?seq
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price))
library(tidyverse)
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price), alpha = 1/1000)
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price), alpha = 1/100)
install.packages("hexbin")
smaller
ggplot(data = diamonds) + geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) + geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_boxplot( mapping = aes( group = cut_width(carat,0.1)))
count(diamonds, color, cut)
diamonds %>% count(color, cut)
?geom_tile
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(diamonds)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("RGtk2")
install.packages("rattle")
library(rattle)
source('~/.active-rstudio-document', echo=TRUE)
# Basic size information.
dim(ds) %>% comcat()
## 138,307 24
nrow(ds) %>% comcat()
## 138,307
ncol(ds) %>% comcat()
## 24
glimpse(ds)
names(ds) %>% normVarNames()
glimpse(ds)
names(ds) %<>% normVarNames()
glimpse(ds)
head(ds)
tail(ds)
sample_n(ds, n = 6)
sample_n(ds, size = 6)
# How many locations are represented in the dataset.
ds$location %>%
unique() %>%
length()
ds$location %>%
unique()
length(ds$location)
ds$location %<>% as.factor()
glimpse(ds)
str(ds)
table(ds$location)
ds %>%
select(starts_with("rain_")) %>%
sapply(table)
ds %>%
select(starts_with("rain_")) %>% head()
ds %>%
select(starts_with("rain_")) %>% unique()
ds$rain_today %>% unique()
ds %>%
select(starts_with("rain_")) %>%
names() %T>%
print() ->
vnames
vnames
ds %>%
select(starts_with("rain_")) %>%
names()
length(vnames)
typeof(vnames)
ds[vnames]
class(df$rain_today)
class(ds$rain_today)
ds$rain_today
typeof(ds$rain_today)
df[vnames] %>% sapply(class)
ds[vnames] %>% sapply(class)
ds[vnames] %<>%
lapply(factor) %>%
data.frame() %>%
tbl_df() %T>%
{sapply(., class) %>% print()}
{ print(1); print(2); print(3) }
my_list <- list(1,2,3)
my_list
unlist(my_list)
my_list2 <- list(1,2,"a")
unlist(my_list2)
dim(1:2)
length(1:2)
dim(array(1:2))
my_df <- data.frame(x = 1:10, y = rep("a", 10))
attributes(my_df)
my_tb <- as.tibble(my_df)
attributes(my_tb)
ds[vnames] %<>%
lapply(factor) %>%
data.frame() %>%
tbl_df() %T>%
{sapply(., class) %>% print()}
ds[vnames] %<>%
lapply(factor) %>%
data.frame() %>%
tbl_df()
ds[vnames] %<>%
lapply(factor) %>%
data.frame() %>%
tbl_df() %T>%
{sapply(., class) %>% print()}
ds %>%
select(starts_with("rain_")) %>%
sapply(table)
ds %>%
select(contains("_dir")) %>%
sapply(table)
compass <- c("N", "NNE", "NE", "ENE",
"E", "ESE", "SE", "SSE",
"S", "SSW", "SW", "WSW",
"W", "WNW", "NW", "NNW")
ds %>%
select(contains("_dir")) %>%
names() %T>%
print() ->
vnames
ds[vnames] %>% sapply(class)
ds[vnames] %<>%
lapply(factor, levels=compass, ordered=TRUE) %>%
data.frame() %>%
tbl_df() %T>%
{sapply(., class) %>% print()}
help(tbl_df)
if(exists("risk")) risk
risk
risk <- "risk_mm"
id <- c("date", "location")
id %>%
union(if (exists("risk")) risk) %T>%
print() ->
ignore
ignore
if (exists("risk")) risk
if (exists("risk")) {risk}
exists("risk")
if (exists("risk")) {NULL}
exists("adsf")
my_obj <- 1:3
exists("my")
exists("my_onj")
exists("my_obj")
union(1:2,1:3)
union(1:2,FALSE)
union("a",F)
if(exists("dwfrfrf")) {risk}
if(exists("dwfrfrf")) {risk} -> ojg
ojg
if(exists("dwfrfrf")) {risk} %>% typeof()
if(exists("dwfrfrf")) {risk} %>% union(1:3)
if(exists("dwfrfrf")) {risk} %>% union(1:3) %>% print()
print(union(1:3))
id %>%
union(if (exists("riskefe")) risk) %T>%
print() ->
ignore
id %>%
union(if (exists("risk")) risk) %T>%
print() ->
ignore
print(union(1:3))
union(1:3,NULL)
is.null(if(FALSE))
is.null(if(FALSE){0})
equals(1:3,2)
equals(1:3,2) %>% which()
names(2)
count_unique <- function(x)
{
x %>% unique() %>% length()
}
ds[vars] %>%
sapply(count_unique) %>%
equals(nrow(ds)) %>%
which() %>%
names() %T>%
print() ->
ids
ignore <- union(ignore, ids) %T>% print()
ds %>%
names() %T>%
print() ->
vars
count_unique <- function(x)
{
x %>% unique() %>% length()
}
ds[vars] %>%
sapply(count_unique) %>%
equals(nrow(ds)) %>%
which() %>%
names() %T>%
print() ->
ids
ignore <- union(ignore, ids) %T>% print()
ds[vars] %>%
sapply(count_unique) %>%
equals(nrow(ds)) %>%
which()
ds[vars] %>%
sapply(count_unique)
ds[vars] %>%
sapply(count_unique) %>%
equals(nrow(ds))
ds[vars] %>%
sapply(count_unique) %>%
equals(nrow(ds)) %>%
which()
ds[vars] %>%
sapply(count_unique) %>%
equals(nrow(ds)) %>%
which() %>%
names()
my_a <- set_names(1:3, letters[1:3])
my_a
which(equals(my_a,2))
my_a <- set_names(4:6, letters[1:3])
which(equals(my_a,2))
which(equals(my_a,5))
which(equals(my_a,5)) %>% names()
'>'(3,4)
`>`(3,4)
extract2
class(ds)
attributes(ds)
source('~/Desktop/projects/Data science/20_observe.R', echo=TRUE)
echo
?echo
comcat
install.packages("Rcmdr")
table(c(1,2,2,2,3,1,2))
source('~/Desktop/projects/Github/Simulacra/build_site.R', echo=TRUE)
